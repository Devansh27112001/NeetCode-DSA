/* Find the Difference

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Constraints:
  0 <= s.length <= 1000
  t.length == s.length + 1
  s and t consist of lowercase English letters.
*/

// TC = O(m + n + k)
// SC = O(k)
const solution_optimal = (s: string, t: string): string => {
  let sMap: { [key: string]: number } = {};
  let tMap: { [key: string]: number } = {};

  for (const char of s) {
    sMap[char] = (sMap[char] || 0) + 1;
  }

  for (const char of t) {
    tMap[char] = (tMap[char] || 0) + 1;
  }

  for (const key of Object.keys(tMap)) {
    if (sMap[key] && tMap[key] === sMap[key]) {
      continue;
    } else {
      return key;
    }
  }
  return "";
};
// console.log(solution_optimal("", "y"));

// TC = O(n*m_initial)
const solution_optimal_2 = (s: string, t: string): string => {
  for (const char of s) {
    t = t.replace(char, "");
  }
  return t;
};
// console.log(solution_optimal_2("aa", "aba"));

const solution_optimal_3 = (s: string, t: string): string => {
  let xorS = 0;
  for (let i = 0; i < s.length; i++) {
    xorS ^= s[i].charCodeAt(0);
  }

  let xorT = 0;
  for (let i = 0; i < t.length; i++) {
    xorS ^= t[i].charCodeAt(0);
  }

  return String.fromCharCode(xorS ^ xorT);
};

console.log(solution_optimal_3("aa", "aba"));
